// Code generated by ent, DO NOT EDIT.

package likerecord

import (
	"memo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldUserID, v))
}

// MemoID applies equality check predicate on the "memo_id" field. It's identical to MemoIDEQ.
func MemoID(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldMemoID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLTE(FieldUserID, v))
}

// MemoIDEQ applies the EQ predicate on the "memo_id" field.
func MemoIDEQ(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldMemoID, v))
}

// MemoIDNEQ applies the NEQ predicate on the "memo_id" field.
func MemoIDNEQ(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNEQ(FieldMemoID, v))
}

// MemoIDIn applies the In predicate on the "memo_id" field.
func MemoIDIn(vs ...uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldIn(FieldMemoID, vs...))
}

// MemoIDNotIn applies the NotIn predicate on the "memo_id" field.
func MemoIDNotIn(vs ...uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNotIn(FieldMemoID, vs...))
}

// MemoIDGT applies the GT predicate on the "memo_id" field.
func MemoIDGT(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGT(FieldMemoID, v))
}

// MemoIDGTE applies the GTE predicate on the "memo_id" field.
func MemoIDGTE(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGTE(FieldMemoID, v))
}

// MemoIDLT applies the LT predicate on the "memo_id" field.
func MemoIDLT(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLT(FieldMemoID, v))
}

// MemoIDLTE applies the LTE predicate on the "memo_id" field.
func MemoIDLTE(v uuid.UUID) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLTE(FieldMemoID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LikeRecord {
	return predicate.LikeRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMemos applies the HasEdge predicate on the "memos" edge.
func HasMemos() predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemosTable, MemosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemosWith applies the HasEdge predicate on the "memos" edge with a given conditions (other predicates).
func HasMemosWith(preds ...predicate.Memo) predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		step := newMemosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LikeRecord) predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LikeRecord) predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LikeRecord) predicate.LikeRecord {
	return predicate.LikeRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
