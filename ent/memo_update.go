// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"memo/ent/memo"
	"memo/ent/predicate"
	"memo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemoUpdate is the builder for updating Memo entities.
type MemoUpdate struct {
	config
	hooks    []Hook
	mutation *MemoMutation
}

// Where appends a list predicates to the MemoUpdate builder.
func (mu *MemoUpdate) Where(ps ...predicate.Memo) *MemoUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MemoUpdate) SetUserID(i int) *MemoUpdate {
	mu.mutation.ResetUserID()
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableUserID(i *int) *MemoUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// AddUserID adds i to the "user_id" field.
func (mu *MemoUpdate) AddUserID(i int) *MemoUpdate {
	mu.mutation.AddUserID(i)
	return mu
}

// ClearUserID clears the value of the "user_id" field.
func (mu *MemoUpdate) ClearUserID() *MemoUpdate {
	mu.mutation.ClearUserID()
	return mu
}

// SetDescription sets the "description" field.
func (mu *MemoUpdate) SetDescription(s string) *MemoUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableDescription(s *string) *MemoUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MemoUpdate) SetUpdatedAt(t time.Time) *MemoUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableUpdatedAt(t *time.Time) *MemoUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MemoUpdate) SetCreatedAt(t time.Time) *MemoUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableCreatedAt(t *time.Time) *MemoUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (mu *MemoUpdate) AddUserIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUsers adds the "users" edges to the User entity.
func (mu *MemoUpdate) AddUsers(u ...*User) *MemoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (mu *MemoUpdate) Mutation() *MemoMutation {
	return mu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (mu *MemoUpdate) ClearUsers() *MemoUpdate {
	mu.mutation.ClearUsers()
	return mu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (mu *MemoUpdate) RemoveUserIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUsers removes "users" edges to User entities.
func (mu *MemoUpdate) RemoveUsers(u ...*User) *MemoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemoUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemoUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemoUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UserID(); ok {
		_spec.SetField(memo.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedUserID(); ok {
		_spec.AddField(memo.FieldUserID, field.TypeInt, value)
	}
	if mu.mutation.UserIDCleared() {
		_spec.ClearField(memo.FieldUserID, field.TypeInt)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(memo.FieldDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(memo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(memo.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemoUpdateOne is the builder for updating a single Memo entity.
type MemoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemoMutation
}

// SetUserID sets the "user_id" field.
func (muo *MemoUpdateOne) SetUserID(i int) *MemoUpdateOne {
	muo.mutation.ResetUserID()
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableUserID(i *int) *MemoUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// AddUserID adds i to the "user_id" field.
func (muo *MemoUpdateOne) AddUserID(i int) *MemoUpdateOne {
	muo.mutation.AddUserID(i)
	return muo
}

// ClearUserID clears the value of the "user_id" field.
func (muo *MemoUpdateOne) ClearUserID() *MemoUpdateOne {
	muo.mutation.ClearUserID()
	return muo
}

// SetDescription sets the "description" field.
func (muo *MemoUpdateOne) SetDescription(s string) *MemoUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableDescription(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MemoUpdateOne) SetUpdatedAt(t time.Time) *MemoUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableUpdatedAt(t *time.Time) *MemoUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MemoUpdateOne) SetCreatedAt(t time.Time) *MemoUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableCreatedAt(t *time.Time) *MemoUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (muo *MemoUpdateOne) AddUserIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUsers adds the "users" edges to the User entity.
func (muo *MemoUpdateOne) AddUsers(u ...*User) *MemoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (muo *MemoUpdateOne) Mutation() *MemoMutation {
	return muo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (muo *MemoUpdateOne) ClearUsers() *MemoUpdateOne {
	muo.mutation.ClearUsers()
	return muo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (muo *MemoUpdateOne) RemoveUserIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUsers removes "users" edges to User entities.
func (muo *MemoUpdateOne) RemoveUsers(u ...*User) *MemoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the MemoUpdate builder.
func (muo *MemoUpdateOne) Where(ps ...predicate.Memo) *MemoUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemoUpdateOne) Select(field string, fields ...string) *MemoUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Memo entity.
func (muo *MemoUpdateOne) Save(ctx context.Context) (*Memo, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemoUpdateOne) SaveX(ctx context.Context) *Memo {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemoUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemoUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MemoUpdateOne) sqlSave(ctx context.Context) (_node *Memo, err error) {
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Memo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memo.FieldID)
		for _, f := range fields {
			if !memo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UserID(); ok {
		_spec.SetField(memo.FieldUserID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedUserID(); ok {
		_spec.AddField(memo.FieldUserID, field.TypeInt, value)
	}
	if muo.mutation.UserIDCleared() {
		_spec.ClearField(memo.FieldUserID, field.TypeInt)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(memo.FieldDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(memo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(memo.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memo.UsersTable,
			Columns: []string{memo.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Memo{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
