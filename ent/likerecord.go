// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"memo/ent/likerecord"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// LikeRecord is the model entity for the LikeRecord schema.
type LikeRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// MemoID holds the value of the "memo_id" field.
	MemoID uuid.UUID `json:"memo_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeRecordQuery when eager-loading is set.
	Edges        LikeRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LikeRecordEdges holds the relations/edges for other nodes in the graph.
type LikeRecordEdges struct {
	// Memos holds the value of the memos edge.
	Memos []*Memo `json:"memos,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemosOrErr returns the Memos value or an error if the edge
// was not loaded in eager-loading.
func (e LikeRecordEdges) MemosOrErr() ([]*Memo, error) {
	if e.loadedTypes[0] {
		return e.Memos, nil
	}
	return nil, &NotLoadedError{edge: "memos"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e LikeRecordEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikeRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case likerecord.FieldID, likerecord.FieldUserID:
			values[i] = new(sql.NullInt64)
		case likerecord.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case likerecord.FieldMemoID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikeRecord fields.
func (lr *LikeRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int(value.Int64)
		case likerecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				lr.UserID = int(value.Int64)
			}
		case likerecord.FieldMemoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field memo_id", values[i])
			} else if value != nil {
				lr.MemoID = *value
			}
		case likerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LikeRecord.
// This includes values selected through modifiers, order, etc.
func (lr *LikeRecord) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryMemos queries the "memos" edge of the LikeRecord entity.
func (lr *LikeRecord) QueryMemos() *MemoQuery {
	return NewLikeRecordClient(lr.config).QueryMemos(lr)
}

// QueryUsers queries the "users" edge of the LikeRecord entity.
func (lr *LikeRecord) QueryUsers() *UserQuery {
	return NewLikeRecordClient(lr.config).QueryUsers(lr)
}

// Update returns a builder for updating this LikeRecord.
// Note that you need to call LikeRecord.Unwrap() before calling this method if this LikeRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LikeRecord) Update() *LikeRecordUpdateOne {
	return NewLikeRecordClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LikeRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LikeRecord) Unwrap() *LikeRecord {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikeRecord is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LikeRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LikeRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserID))
	builder.WriteString(", ")
	builder.WriteString("memo_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.MemoID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LikeRecords is a parsable slice of LikeRecord.
type LikeRecords []*LikeRecord
